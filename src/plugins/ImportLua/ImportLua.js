/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Sat Jan 30 2016 20:12:43 GMT-0600 (CST).
 */

define([
    'plugin/Diagrammer/Diagrammer/Diagrammer',
    './lua.js'  // defines luajs globally
], function (
    PluginBase
) {
    'use strict';

    /**
     * Initializes a new instance of ImportLua.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportLua.
     * @constructor
     */
    var ImportLua = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this._bin;
    };

    // Prototypal inheritance from PluginBase.
    ImportLua.prototype = Object.create(PluginBase.prototype);
    ImportLua.prototype.constructor = ImportLua;

    /**
     * Gets the name of the ImportLua.
     * @returns {string} The name of the plugin.
     * @public
     */
    ImportLua.prototype.getName = function () {
        return 'ImportLua';
    };

    /**
     * Gets the semantic version (semver.org) of the ImportLua.
     * @returns {string} The version of the plugin.
     * @public
     */
    ImportLua.prototype.getVersion = function () {
        return '0.1.0';
    };

    ImportLua.prototype.getConfigStructure = function () {
        var config = PluginBase.prototype.getConfigStructure();
        config[0].description = 'Lua source to diagram';
        return config;
    };

    ImportLua.prototype.createCode = function (jsSrc) {
        var context = luajs.newContext();
        // load the lua into js
        context.loadStdLib();
        this._bin = context.loadString(jsSrc, context._G);
        return context;
    };

    ImportLua.prototype.prepare = function (context) {
        var varFrame = context._G.stringMap,
            oldSetMetaTable = varFrame.setmetatable,
            self = this;

        // Override setmetatable
        varFrame.setmetatable = function (child, base) {
            // Create the nodes and connection
            // TODO
            self.recordInheritance(child, base);

            // Retrieve the name of the object...?
            return oldSetMetaTable.call(this, child, base);
        }

        // Get the current variables
        this.originalVars = this._getAllVarNames(context);
    };

    ImportLua.prototype.runCode = function (context) {
        this._bin();
    };

    return ImportLua;
});
