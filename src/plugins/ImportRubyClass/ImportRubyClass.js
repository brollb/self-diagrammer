/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Sat Jan 30 2016 20:30:52 GMT-0600 (CST).
 */

define([
    'plugin/Diagrammer/Diagrammer/Diagrammer',
    './opal-both.js'
], function (
    PluginBase,
    rb2js
) {
    'use strict';

    /**
     * Initializes a new instance of ImportRubyClass.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportRubyClass.
     * @constructor
     */
    var ImportRubyClass = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    ImportRubyClass.prototype = Object.create(PluginBase.prototype);
    ImportRubyClass.prototype.constructor = ImportRubyClass;

    /**
     * Gets the name of the ImportRubyClass.
     * @returns {string} The name of the plugin.
     * @public
     */
    ImportRubyClass.prototype.getName = function () {
        return 'ImportRubyClass';
    };

    /**
     * Gets the semantic version (semver.org) of the ImportRubyClass.
     * @returns {string} The version of the plugin.
     * @public
     */
    ImportRubyClass.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Gets the configuration structure for the ImportRubyClass.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    ImportRubyClass.prototype.getConfigStructure = function () {
        var config = PluginBase.prototype.getConfigStructure();
        config[0].description = 'Ruby source code to diagram';
        return config;
    };

    ImportRubyClass.prototype.createCode = function (rbSrc) {
        // Convert the src to js
        this._src = Opal.compile(rbSrc);

        console.log('about to eval stuff');
        this._originalOpal = _.clone(Opal);
        return Opal;
    };

    ImportRubyClass.prototype.prepare = function (context) {
        var self = this,
            oldCtor = context.klass;

        context.klass = function(base, spr, name, fn) {
            if (spr) {
                self.recordInheritance(name, spr.$$name);
            }
            return oldCtor.call(this, base, spr, name, fn);
        };

        // Record initial variables
        this.originalVars = context.constants.slice();
    };

    ImportRubyClass.prototype.resolveClassNames = function (context) {
        // nop
    };

    ImportRubyClass.prototype.runCode = function () {
        eval(this._src);
    };

    ImportRubyClass.prototype.onFinish = function () {
        Opal = this._originalOpal;
    };

    return ImportRubyClass;
});
